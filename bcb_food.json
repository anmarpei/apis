{
  "swagger": "3.0",
  "info": {
    "title": "BCB - Burguer Cangre Burguer - Food API.",
    "description": "Food list offer at BCB API.",
    "version": "1.0.0",
    "contact": {
      "name": "BCB - IT Support."
    }
  },
  "host": "burguer-cangre.com",
  "basePath": "/bcb/foods/v1",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "Users"
    },
    {
      "name": "Foods"
    },
    {
      "name": "Orders"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Create User.",
        "description": "Create a new user for use BCB services, who can search different food on the catalog and order anyone.",
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "User.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "$ref": "#/definitions/UserType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource created successfully.",
            "schema": {
              "$ref": "#/definitions/UserType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "get": {
        "summary": "Find all Users.",
        "description": "Find a list of users, can be filtered by name and surname. Allows pagination and if isn't used, all results will be returned as a response.",
        "operationId": "getUsers",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "User's name."
          },
          {
            "in": "query",
            "name": "surname",
            "type": "string",
            "description": "User's surname."
          },
          {
            "name": "firstPage",
            "in": "query",
            "description": "Requested page (first page is page 1). If not specified 1 is used. (Cannot be negative).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizePage",
            "in": "query",
            "description": "Number of retrieved elements per page. If not specified 10 is used. (Cannot be less than 1).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Parameter to order results. Use '+-' to indicated the direction.",
            "type": "string",
            "required": false,
            "default": "+id",
            "enum": [
              "+id",
              "-id",
              "+name",
              "-name",
              "+surname",
              "-surname"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref":  "#/definitions/SuccessGetCollectionUser"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get a User data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Get a User by Id').",
        "operationId": "getUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "path",
            "name": "userId",
            "type": "number",
            "description": "User Id.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessUser"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "patch": {
        "summary": "Modify a User data.",
        "description": "Modifies partially a user data by identifier.",
        "operationId": "updateUserUsingPATCH",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "number",
            "description": "User Id.",
            "required": true
          },
          {
            "in": "body",
            "name": "data",
            "description": "User.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "user"
              ],
              "properties": {
                "user": {
                  "$ref": "#/definitions/UserType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully.",
            "schema": {
              "$ref": "#/definitions/UserType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a User data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Delete a User by Id').",
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "number",
            "description": "User Id.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted successfully."
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/foods": {
      "post": {
        "summary": "Create Food.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Create Food using FoodType definition').",
        "operationId": "createFood",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Food.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Food"
              ],
              "properties": {
                "Food": {
                  "$ref": "#/definitions/FoodType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource created successfully.",
            "schema": {
              "$ref": "#/definitions/FoodType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "put": {
        "summary": "Edit Food.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Edit Food by identifier using FoodType definition').",
        "operationId": "updateFoodUsingPUT",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Food.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Food"
              ],
              "properties": {
                "Food": {
                  "$ref": "#/definitions/FoodType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully.",
            "schema": {
              "$ref": "#/definitions/FoodType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "get": {
        "summary": "Find all Foods.",
        "description": "Find a list of Foods, can be filtered by name and isAvailable. Allows pagination and if isn't used, all results will be returned as a response.",
        "operationId": "getFoods",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string",
            "description": "Food name."
          },
          {
            "in": "query",
            "name": "isAvailable",
            "type": "boolean",
            "description": "Food available or not."
          },
          {
            "name": "firstPage",
            "in": "query",
            "description": "Requested page (first page is page 1). If not specified 1 is used. (Cannot be negative).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizePage",
            "in": "query",
            "description": "Number of retrieved elements per page. If not specified 10 is used. (Cannot be less than 1).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Parameter to order results. Use '+-' to indicated the direction.",
            "type": "string",
            "required": false,
            "default": "+id",
            "enum": [
              "+id",
              "-id",
              "+name",
              "-name"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref":  "#/definitions/SuccessGetCollectionFood"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/foods/{foodId}": {
      "get": {
        "summary": "Get a Food data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Get a Food by Id').",
        "operationId": "getFood",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "path",
            "name": "foodId",
            "type": "number",
            "description": "Food Id.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessFood"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "patch": {
        "summary": "Modify a Food data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Modify a Food by Id').",
        "operationId": "updateFoodUsingPATCH",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "foodId",
            "type": "number",
            "description": "Food Id.",
            "required": true
          },
          {
            "in": "body",
            "name": "data",
            "description": "Food.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "Food"
              ],
              "properties": {
                "Food": {
                  "$ref": "#/definitions/FoodType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully.",
            "schema": {
              "$ref": "#/definitions/FoodType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Food data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Delete a Food by Id').",
        "operationId": "deleteFood",
        "tags": [
          "Foods"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "foodId",
            "type": "number",
            "description": "Food Id.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted successfully."
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Find all Orders.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Find a list of Orders. This method allow pagination(If isn't used, all results will be returned)').",
        "operationId": "getOrders",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "name": "firstPage",
            "in": "query",
            "description": "Requested page (first page is page 1). If not specified 1 is used. (Cannot be negative).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizePage",
            "in": "query",
            "description": "Number of retrieved elements per page. If not specified 10 is used. (Cannot be less than 1).",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "order",
            "in": "query",
            "description": "Parameter to order results. Use '+-' to indicated the direction.",
            "type": "string",
            "required": false,
            "enum": [
              "+id",
              "-id",
              "+creationDate",
              "-creationDate"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref":  "#/definitions/SuccessGetCollectionOrder"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "summary": "Get a Order data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Get a Order by Id').",
        "operationId": "getOrder",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "path",
            "name": "orderId",
            "type": "number",
            "description": "Order Id.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessOrder"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "patch": {
        "summary": "Modify a Order data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Modify a Order by Id').",
        "operationId": "updateOrderUsingPATCH",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "type": "number",
            "description": "Order Id.",
            "required": true
          },
          {
            "in": "body",
            "name": "data",
            "description": "Order.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "order"
              ],
              "properties": {
                "order": {
                  "$ref": "#/definitions/OrderType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully.",
            "schema": {
              "$ref": "#/definitions/OrderType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Order data.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Delete a Order by Id').",
        "operationId": "deleteOrder",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "type": "number",
            "description": "Order Id.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted successfully."
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    },
    "/users/{userId}/orders": {
      "get": {
        "summary": "Get all Orders from a User.",
        "description": "From a User identifier, finds all orders for this user.",
        "operationId": "getOrdersFromUser",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "locale",
            "type": "string",
            "description": "Favourite language.",
            "required": false,
            "default": "es-ES"
          },
          {
            "in": "path",
            "name": "userId",
            "type": "number",
            "description": "User Id.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource obtained successfully.",
            "schema": {
              "$ref":  "#/definitions/SuccessGetCollectionOrder"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      },
      "post": {
        "summary": "Create each order for User.",
        "description": "Here is to write a detailed description about the operation, with its restrictions and pretended to be selfexplicated for consumers. Maybe could add one example of use. (Maybe could start with 'Create Order using OrderType definition for User').",
        "operationId": "createOrderForUser",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "type": "number",
            "description": "User Id.",
            "required": true
          },
          {
            "in": "body",
            "name": "data",
            "description": "Order.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "order"
              ],
              "properties": {
                "order": {
                  "$ref": "#/definitions/OrderType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource created successfully.",
            "schema": {
              "$ref": "#/definitions/OrderType"
            }
          },
          "400": {
            "description": "Bad request or functional error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorType"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "UserType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "User's Id."
        },
        "alias": {
          "type": "string",
          "description": "User's alias."
        },
        "name": {
          "type": "string",
          "description": "User's name."
        },
        "surname": {
          "type": "string",
          "description": "User's surname."
        },
        "secondSurname": {
          "type": "string",
          "description": "User's second surname."
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "User's birthdate."
        }
      }
    },
    "FoodType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Food's Id."
        },
        "name": {
          "type": "string",
          "description": "Food's name."
        },
        "category": {
          "type": "string",
          "description": "Food's category."
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "description": "Food's price per unit."
        },
        "isAvailable": {
          "type": "boolean",
          "description": "Is a Food current for sale."
        }
      }
    },
    "OrderType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Order's Id."
        },
        "user": {
          "$ref": "#/definitions/UserIdResource"
        },
        "dates": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/OrderDatesType"
            }
          ]
        },
        "foods": {
          "type": "array",
          "description": "Order Foods.",
          "items": {
            "$ref": "#/definitions/FoodIdResource"
          }
        }
      }
    },
    "OrderDatesType": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date",
          "description": "Order's creation date."
        },
        "preparationDate": {
          "type": "string",
          "description": "Date and time of preparation of the order.",
          "format": "date-time"
        },
        "deliveryDate": {
          "type": "string",
          "description": "End date and time of the sales order once it has been completed and handed over to the customer.",
          "format": "date-time"
        },
        "cancellationDate": {
          "type": "string",
          "description": "Date and time of cancellation of the order.",
          "format": "date-time"
        }
      }
    },
    "UserIdResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "FoodIdResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "SuccessGetCollectionUser": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserType"
          }
        },
        "pagination": {
          "$ref": "#/definitions/PaginationType"
        }
      }
    },
    "SuccessGetCollectionFood": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FoodType"
          }
        },
        "pagination": {
          "$ref": "#/definitions/PaginationType"
        }
      }
    },
    "SuccessGetCollectionOrder": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderType"
          }
        },
        "pagination": {
          "$ref": "#/definitions/PaginationType"
        }
      }
    },
    "SuccessUser": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "$ref": "#/definitions/UserType"
        }
      }
    },
    "SuccessFood": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "$ref": "#/definitions/FoodType"
        }
      }
    },
    "SuccessOrder": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "metadata": {
          "type": "object"
        },
        "data": {
          "$ref": "#/definitions/OrderType"
        }
      }
    },
    "ErrorType": {
      "type": "object",
      "required": [
        "code",
        "description"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "description": "Detailed backend Error: backend error Id + message text.",
          "items": {
            "$ref": "#/definitions/ErrorTypeDetails"
          }
        }
      }
    },
    "ErrorTypeDetails": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": ""
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PaginationType": {
      "type": "object",
      "properties": {
        "requestedPage": {
          "type": "integer",
          "format": "int32"
        },
        "requestedSize": {
          "type": "integer",
          "format": "int32"
        },
        "retrievedResults": {
          "type": "integer",
          "format": "int32"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "nextPage": {
          "type": "string",
          "example": "https://api.example.com/information-domain/principal-resources/v1/users?firstPage=2&pageSize=10"
        },
        "previousPage": {
          "type": "string",
          "example": "https://api.example.com/information-domain/principal-resources/v1/users?firstPage=1&pageSize=10"
        }
      }
    }
  }
}